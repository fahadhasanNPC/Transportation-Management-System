CREATE TABLE DRIVERS (
    DRIVER_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50),
    LICENSE_NUMBER VARCHAR2(50),
    PHONE VARCHAR2(20)
);


CREATE TABLE BUSES (
    BUS_ID INT PRIMARY KEY,
    BUS_NUMBER VARCHAR2(20),
    SEATING_CAPACITY INT,
    REGISTRATION_NUMBER VARCHAR2(50),
    YEAROFASSEMBLE VARCHAR2(255),
    DRIVER_ID INT,
    FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID)
);

CREATE TABLE ROUTES (
    ROUTE_ID INT PRIMARY KEY,
    ROUTE_NAME VARCHAR2(100),
    START_LOCATION VARCHAR2(100),
    END_LOCATION VARCHAR2(100)
);

CREATE TABLE STOPS (
    STOP_ID INT PRIMARY KEY,
    STOP_NAME VARCHAR2(50),
    LOCATIONOFSTOPAGE VARCHAR2(50),
    ETA VARCHAR2(50)
);

CREATE TABLE SCHEDULES (
    SCHEDULE_ID INT PRIMARY KEY,
    DEPARTURE_TIME VARCHAR(50),
    ARRIVAL_TIME VARCHAR(50),
    BUS_ID INT,
    ROUTE_ID INT,
    FOREIGN KEY (BUS_ID) REFERENCES BUSES(BUS_ID),
    FOREIGN KEY (ROUTE_ID) REFERENCES ROUTES(ROUTE_ID)
);

CREATE TABLE TICKETS (
    TICKET_ID INT PRIMARY KEY,
    SCHEDULE_ID INT,
    PASSENGER_NAME VARCHAR2(100),
    SEAT_NUMBER VARCHAR2(10),
    PRICE VARCHAR(500),
    FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULES(SCHEDULE_ID)
);

CREATE TABLE PAYMENTS (
    PAYMENT_ID INT PRIMARY KEY,
    TICKET_ID INT,
    PAYMENT_DATE VARCHAR(255),
    AMOUNT VARCHAR(255),
    FOREIGN KEY (TICKET_ID) REFERENCES TICKETS(TICKET_ID)
);

CREATE TABLE EMPLOYEES (
    EMPLOYEE_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50),
    POSITIONS VARCHAR2(100),
    PHONE VARCHAR2(20)
);

CREATE TABLE BUSMAINTENANCE (
    MAINTENANCE_ID INT PRIMARY KEY,
    BUS_ID INT,
    MAINTENANCE_DATE VARCHAR(255),
    DESCRIPTIONS VARCHAR(255),
    COSTS VARCHAR(255),
    FOREIGN KEY (BUS_ID) REFERENCES BUSES(BUS_ID)
);

CREATE TABLE INSPECTIONS (
    INSPECTION_ID INT PRIMARY KEY,
    BUS_ID INT,
    INSPECTION_DATE VARCHAR(255),
    PASSED VARCHAR(255),
    REMARKS VARCHAR(255),
    FOREIGN KEY (BUS_ID) REFERENCES BUSES(BUS_ID)
);

CREATE TABLE COMPLAINTS (
    COMPLAINT_ID INT PRIMARY KEY,
    BUS_ID INT,
    PASSENGER_NAME VARCHAR2(100),
    COMPLAINT_DATE VARCHAR(255),
    COMPLAINT_TEXT VARCHAR(255),
    RESOLVED VARCHAR(255),
    FOREIGN KEY (BUS_ID) REFERENCES BUSES(BUS_ID)
);

CREATE TABLE FEEDBACKS (
    FEEDBACK_ID INT PRIMARY KEY,
    PASSENGER_NAME VARCHAR2(100),
    FEEDBACK_DATE VARCHAR(255),
    FEEDBACK_TEXT VARCHAR(255)
);

CREATE TABLE NOTIFICATIONS (
    NOTIFICATION_ID INT PRIMARY KEY,
    MESSAGE VARCHAR(255),
    NOTIFICATION_DATE VARCHAR(255)
);

CREATE TABLE PASSENGERDETAILS (
    PASSENGER_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50),
    PHONE VARCHAR2(20),
    EMAIL VARCHAR2(100)
);

CREATE TABLE VEHICLEINSPECTIONHISTORY (
    HISTORY_ID INT PRIMARY KEY,
    BUS_ID INT,
    INSPECTION_ID INT,
    INSPECTION_DATE VARCHAR(255),
    REMARKS VARCHAR(255),
    FOREIGN KEY (BUS_ID) REFERENCES BUSES(BUS_ID),
    FOREIGN KEY (INSPECTION_ID) REFERENCES INSPECTIONS(INSPECTION_ID)
);

CREATE VIEW DRIBUS AS
SELECT
    d.DRIVER_ID,
    d.FIRST_NAME AS DRIVER_FIRST_NAME,
    d.LAST_NAME AS DRIVER_LAST_NAME,
    b.BUS_ID,
    b.BUS_NUMBER,
    b.REGISTRATION_NUMBER
FROM
    DRIVERS d
JOIN
    BUSES b
ON
    d.DRIVER_ID = b.DRIVER_ID;
    
    
CREATE VIEW BusScheduleView AS
SELECT
    s.SCHEDULE_ID,
    s.DEPARTURE_TIME,
    s.ARRIVAL_TIME,
    b.BUS_ID,
    b.BUS_NUMBER,
    r.ROUTE_ID,
    r.ROUTE_NAME,
    r.START_LOCATION,
    r.END_LOCATION
FROM
    SCHEDULES s
JOIN
    BUSES b ON s.BUS_ID = b.BUS_ID
JOIN
    ROUTES r ON s.ROUTE_ID = r.ROUTE_ID;
    
CREATE VIEW TicketDetailsView AS
SELECT
    t.TICKET_ID,
    t.PASSENGER_NAME,
    t.SEAT_NUMBER,
    t.PRICE,
    s.SCHEDULE_ID,
    s.DEPARTURE_TIME,
    s.ARRIVAL_TIME,
    b.BUS_NUMBER,
    r.ROUTE_NAME
FROM
    TICKETS t
JOIN
    SCHEDULES s ON t.SCHEDULE_ID = s.SCHEDULE_ID
JOIN
    BUSES b ON s.BUS_ID = b.BUS_ID
JOIN
    ROUTES r ON s.ROUTE_ID = r.ROUTE_ID;
    
CREATE VIEW PaymentDetailsView AS
SELECT
    p.PAYMENT_ID,
    p.PAYMENT_DATE,
    p.AMOUNT,
    t.TICKET_ID,
    t.PASSENGER_NAME,
    t.SEAT_NUMBER,
    t.PRICE
FROM
    PAYMENTS p
JOIN
    TICKETS t ON p.TICKET_ID = t.TICKET_ID;
    

CREATE TABLE SCHEDULES_BACKUP (
    SCHEDULE_ID INT PRIMARY KEY,
    DEPARTURE_TIME VARCHAR(50),
    ARRIVAL_TIME VARCHAR(50),
    BUS_ID INT,
    ROUTE_ID INT,
    FOREIGN KEY (BUS_ID) REFERENCES BUSES(BUS_ID),
    FOREIGN KEY (ROUTE_ID) REFERENCES ROUTES(ROUTE_ID)
);

CREATE TABLE TICKETS_BACKUP (
    TICKET_ID INT PRIMARY KEY,
    SCHEDULE_ID INT,
    PASSENGER_NAME VARCHAR2(100),
    SEAT_NUMBER VARCHAR2(10),
    PRICE VARCHAR(500),
    FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULES(SCHEDULE_ID)
)

ALTER TABLE TICKETS_BACKUP
ADD COLUMN FLAG VARCHAR2(20);

SELECT * FROM v$version;
SELECT name FROM v$database;
SELECT file_name, tablespace_name FROM dba_data_files;

SELECT COUNT(*) AS NumberOfTables 
FROM user_tables;

SELECT 'DRIVERS' AS TableName, COUNT(*) AS NumberOfRows FROM DRIVERS
UNION ALL
SELECT 'BUSES', COUNT(*) FROM BUSES
UNION ALL
SELECT 'ROUTES', COUNT(*) FROM ROUTES
UNION ALL
SELECT 'STOPS', COUNT(*) FROM STOPS
UNION ALL
SELECT 'SCHEDULES', COUNT(*) FROM SCHEDULES
UNION ALL
SELECT 'TICKETS', COUNT(*) FROM TICKETS
UNION ALL
SELECT 'PAYMENTS', COUNT(*) FROM PAYMENTS
UNION ALL
SELECT 'EMPLOYEES', COUNT(*) FROM EMPLOYEES
UNION ALL
SELECT 'BUSMAINTENANCE', COUNT(*) FROM BUSMAINTENANCE
UNION ALL
SELECT 'INSPECTIONS', COUNT(*) FROM INSPECTIONS
UNION ALL
SELECT 'COMPLAINTS', COUNT(*) FROM COMPLAINTS
UNION ALL
SELECT 'FEEDBACKS', COUNT(*) FROM FEEDBACKS
UNION ALL
SELECT 'NOTIFICATIONS', COUNT(*) FROM NOTIFICATIONS
UNION ALL
SELECT 'PASSENGERDETAILS', COUNT(*) FROM PASSENGERDETAILS
UNION ALL
SELECT 'VEHICLEINSPECTIONHISTORY', COUNT(*) FROM VEHICLEINSPECTIONHISTORY;



CREATE TRIGGER trg_main_table_delete
AFTER DELETE ON MAIN_TABLE
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP_TABLE (id, deletion_flag)
    VALUES (OLD.id, 1); 
END;



DELIMITER //

CREATE TRIGGER trg_main_table_update
AFTER UPDATE ON MAIN_TABLE
FOR EACH ROW
BEGIN

    UPDATE RELATED_TABLE1
    SET related_column1 = NEW.updated_column_value1
    WHERE id = NEW.id;  
    
   
    UPDATE RELATED_TABLE2
    SET related_column2 = NEW.updated_column_value2
    WHERE id = NEW.id;  
END;
//

DELIMITER ;
